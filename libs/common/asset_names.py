"""Storing AssetNames class"""

from functools import cached_property

from apps.cvnfm.data.constants import CvnfmDefaults
from libs.common.constants import GR_TEST_PREFIX
from libs.common.env_variables import ENV_VARS
from libs.utils.logging.logger import set_eo_gr_logger_for_class


class AssetNames:
    """Class that generates and stores names for test assets"""

    def __init__(self, session_mark: str | None = None):
        """Init method
        Args:
            session_mark (optional): command line value of pytest '-m' option for current test session
        """
        self.session_mark = self._modify_session_mark(session_mark)
        self.logger = set_eo_gr_logger_for_class(self)

    @cached_property
    def openstack_image_name(self) -> str:
        """Generate image name based on given value of environment variable
        Returns:
            image name
        """
        image_name = self._create_asset_name("image")
        self.logger.info(f"Autogenerated image name: {image_name}")
        return image_name

    @cached_property
    def openstack_flavor_name(self) -> str:
        """Generate flavor name based on given value of environment variable
        Returns:
            flavor name
        """
        flavor_name = self._create_asset_name("flavor")
        self.logger.info(f"Autogenerated flavor name: {flavor_name}")
        return flavor_name

    @cached_property
    def openstack_stack_vapp_name(self) -> str:
        """Generate VAPP (Stack) name
        Returns:
            VAPP (Stack) name
        """
        vapp_name = self._create_asset_name("vapp", add_session_mark=True)
        self.logger.info(f"Autogenerated VAPP (Stack) name: {vapp_name}")
        return vapp_name

    @cached_property
    def openstack_network_name(self) -> str:
        """Generate network name based on given value of environment variable
        Returns:
            network name
        """
        network_name = self._create_asset_name("network")
        self.logger.info(f"Autogenerated network name: {network_name}")
        return network_name

    @cached_property
    def cnf_instance_name(self) -> str:
        """Generate CNF instance name based on given value of environment variable
        Returns:
            CNF instance name
        """
        instance_name = self._create_asset_name(CvnfmDefaults.CNF)
        self.logger.info(f"Autogenerated CNF instance name: {instance_name}")
        return instance_name

    @cached_property
    def cnf_unsigned_instance_name(self) -> str:
        """Generate unsigned CNF instance name based on given value of environment variable
        Returns:
            CNF unsigned instance name
        """
        instance_name = self._create_asset_name(f"{CvnfmDefaults.CNF}-unsigned")
        self.logger.info(f"Autogenerated CNF unsigned instance name: {instance_name}")
        return instance_name

    @staticmethod
    def _modify_session_mark(session_mark: str | None) -> str:
        """Modify session mark(s) for been suitable to used in an asset name
        Args:
            session_mark: command line value of pytest '-m' option for current test session
        Returns:
            str with test session mark in format: -<mark>-<mark> if session_mark else empty str
        """
        return "-" + "-".join(session_mark.split()) if session_mark else ""

    def _create_asset_name(
        self,
        asset_type: str,
        *,
        add_session_mark: bool = False,
        add_shared_name: bool = True,
    ) -> str:
        """Create name for provided asset type
        Args:
            asset_type: type of asset
            add_session_mark: add session mark to asset name or not
            add_shared_name: add share name to asset name or not
        Returns:
            asset name to use in gr testing
        """
        session_mark = self.session_mark if add_session_mark else ""
        shared_name = f"-{ENV_VARS.gr_stage_shared_name}" if add_shared_name else ""

        return f"{GR_TEST_PREFIX}{session_mark}-{asset_type}{shared_name}"
